name: CD - Deploy to Staging

on:
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR", "Frontend CI - Build & Push Image"]
    types:
      - completed

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  STAGING_NAMESPACE: staging-${{ github.run_id }}

jobs:
  deploy-to-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group $AKS_RESOURCE_GROUP \
            --name $AKS_CLUSTER_NAME \
            --overwrite-existing

      - name: Attach ACR to AKS
        run: |
          az aks update \
            --name $AKS_CLUSTER_NAME \
            --resource-group $AKS_RESOURCE_GROUP \
            --attach-acr ${{ secrets.AZURE_ACR_NAME }}

      - name: Create staging namespace
        run: kubectl create namespace $STAGING_NAMESPACE

      - name: Deploy ConfigMaps & Secrets
        run: |
          kubectl apply -n $STAGING_NAMESPACE -f k8s/configmaps.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/secrets.yaml

      - name: Deploy Backend Services
        run: |
          kubectl apply -n $STAGING_NAMESPACE -f k8s/order-db.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/product-db.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/customer-db.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/order-service.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/product-service.yaml
          kubectl apply -n $STAGING_NAMESPACE -f k8s/customer-service.yaml

      - name: Deploy Frontend
        run: kubectl apply -n $STAGING_NAMESPACE -f k8s/frontend.yaml

      - name: Wait for pods to be ready
        run: kubectl wait --for=condition=ready pod --all -n $STAGING_NAMESPACE --timeout=180s

      - name: Run health checks
        run: |
          kubectl run curlpod -n $STAGING_NAMESPACE --rm -i --image=curlimages/curl --restart=Never -- \
            curl http://frontend-w10e1/health

      - name: Destroy staging namespace
        if: always()
        run: kubectl delete namespace $STAGING_NAMESPACE
